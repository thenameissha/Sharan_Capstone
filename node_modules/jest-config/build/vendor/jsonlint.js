'use strict';

// From: https://github.com/zaach/jsonlint
// Vendored in Jest to avoid jsonlint's transitive dependencies.

/* eslint-disable */
var jsonlint = (function() {
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      JSONString: 3,
      STRING: 4,
      JSONNumber: 5,
      NUMBER: 6,
      JSONNullLiteral: 7,
      NULL: 8,
      JSONBooleanLiteral: 9,
      TRUE: 10,
      FALSE: 11,
      JSONText: 12,
      JSONValue: 13,
      EOF: 14,
      JSONObject: 15,
      JSONArray: 16,
      '{': 17,
      '}': 18,
      JSONMemberList: 19,
      JSONMember: 20,
      ':': 21,
      ',': 22,
      '[': 23,
      ']': 24,
      JSONElementList: 25,
      $accept: 0,
      $end: 1
    },
    terminals_: {
      2: 'error',
      4: 'STRING',
      6: 'NUMBER',
      8: 'NULL',
      10: 'TRUE',
      11: 'FALSE',
      14: 'EOF',
      17: '{',
      18: '}',
      21: ':',
      22: ',',
      23: '[',
      24: ']'
    },
    productions_: [
      0,
      [3, 1],
      [5, 1],
      [7, 1],
      [9, 1],
      [9, 1],
      [12, 2],
      [13, 1],
      [13, 1],
      [13, 1],
      [13, 1],
      [13, 1],
      [13, 1],
      [15, 2],
      [15, 3],
      [20, 3],
      [19, 1],
      [19, 3],
      [16, 2],
      [16, 3],
      [25, 1],
      [25, 3]
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate,
      $$,
      _$
    ) {
      var $0 = $$.length - 1;

      switch (yystate) {
        case 1:
          // replace escaped characters with actual character
          this.$ = yytext
            .replace(/\\(\\|")/g, '$' + '1')
            .replace(/\\n/g, '\n')
            .replace(/\\r/g, '\r')
            .replace(/\\t/g, '\t')
            .replace(/\\v/g, '\v')
            .replace(/\\f/g, '\f')
            .replace(/\\b/g, '\b');
          break;

        case 2:
          this.$ = Number(yytext);
          break;

        case 3:
          this.$ = null;
          break;

        case 4:
          this.$ = true;
          break;

        case 5:
          this.$ = false;
          break;

        case 6:
          return (this.$ = $$[$0 - 1]);
          break;

        case 13:
          this.$ = {};
          break;

        case 14:
          this.$ = $$[$0 - 1];
          break;

        case 15:
          this.$ = [$$[$0 - 2], $$[$0]];
          break;

        case 16:
          this.$ = {};
          this.$[$$[$0][0]] = $$[$0][1];
          break;

        case 17:
          this.$ = $$[$0 - 2];
          $$[$0 - 2][$$[$0][0]] = $$[$0][1];
          break;

        case 18:
          this.$ = [];
          break;

        case 19:
          this.$ = $$[$0 - 1];
          break;

        case 20:
          this.$ = [$$[$0]];
          break;

        case 21:
          this.$ = $$[$0 - 2];
          $$[$0 - 2].push($$[$0]);
          break;
      }
    },
    table: [
      {
        3: 5,
        4: [1, 12],
        5: 6,
        6: [1, 13],
        7: 3,
        8: [1, 9],
        9: 4,
        10: [1, 10],
        11: [1, 11],
        12: 1,
        13: 2,
        15: 7,
        16: 8,
        17: [1, 14],
        23: [1, 15]
      },
      {
        1: [3]
      },
      {
        14: [1, 16]
      },
      {
        14: [2, 7],
        18: [2, 7],
        22: [2, 7],
        24: [2, 7]
      },
      {
        14: [2, 8],
        18: [2, 8],
        22: [2, 8],
        24: [2, 8]
      },
      {
        14: [2, 9],
        18: [2, 9],
        22: [2, 9],
        24: [2, 9]
      },
      {
        14: [2, 10],
        18: [2, 10],
        22: [2, 10],
        24: [2, 10]
      },
      {
        14: [2, 11],
        18: [2, 11],
        22: [2, 11],
        24: [2, 11]
      },
      {
        14: [2, 12],
        18: [2, 12],
        22: [2, 12],
        24: [2, 12]
      },
      {
        14: [2, 3],
        18: [2, 3],
        22: [2, 3],
        24: [2, 3]
      },
      {
        14: [2, 4],
        18: [2, 4],
        22: [2, 4],
        24: [2, 4]
      },
      {
        14: [2, 5],
        18: [2, 5],
        22: [2, 5],
        24: [2, 5]
      },
      {
        14: [2, 1],
        18: [2, 1],
        21: [2, 1],
        22: [2, 1],
        24: [2, 1]
      },
      {
        14: [2, 2],
        18: [2, 2],
        22: [2, 2],
        24: [2, 2]
      },
      {
        3: 20,
        4: [1, 12],
        18: [1, 17],
        19: 18,
        20: 19
      },
      {
        3: 5,
        4: [1, 12],
        5: 6,
        6: [1, 13],
        7: 3,
        8: [1, 9],
        9: 4,
        10: [1, 10],
        11: [1, 11],
        13: 23,
        15: 7,
        16: 8,
        17: [1, 14],
        23: [1, 15],
        24: [1, 21],
        25: 22
      },
      {
        1: [2, 6]
      },
      {
        14: [2, 13],
        18: [2, 13],
        22: [2, 13],
        24: [2, 13]
      },
      {
        18: [1, 24],
        22: [1, 25]
      },
      {
        18: [2, 16],
        22: [2, 16]
      },
      {
        21: [1, 26]
      },
      {
        14: [2, 18],
        18: [2, 18],
        22: [2, 18],
        24: [2, 18]
      },
      {
        22: [1, 28],
        24: [1, 27]
      },
      {
        22: [2, 20],
        24: [2, 20]
      },
      {
        14: [2, 14],
        18: [2, 14],
        22: [2, 14],
        24: [2, 14]
      },
      {
        3: 20,
        4: [1, 12],
        20: 29
      },
      {
        3: 5,
        4: [1, 12],
        5: 6,
        6: [1, 13],
        7: 3,
        8: [1, 9],
        9: 4,
        10: [1, 10],
        11: [1, 11],
        13: 30,
        15: 7,
        16: 8,
        17: [1, 14],
        23: [1, 15]
      },
      {
        14: [2, 19],
        18: [2, 19],
        22: [2, 19],
        24: [2, 19]
      },
      {
        3: 5,
        4: [1, 12],
        5: 6,
        6: [1, 13],
        7: 3,
        8: [1, 9],
        9: 4,
        10: [1, 10],
        11: [1, 11],
        13: 31,
        15: 7,
        16: 8,
        17: [1, 14],
        23: [1, 15]
      },
      {
        18: [2, 17],
        22: [2, 17]
      },
      {
        18: [2, 15],
        22: [2, 15]
      },
      {
        22: [2, 21],
        24: [2, 21]
      }
    ],
    defaultActions: {
      16: [2, 6]
    },
    parseError: function parseError(str, hash) {
      throw new Error(str);
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        vstack = [null],
        // semantic value stack
        lstack = [],
        // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1; //this.reductionCount = this.shiftCount = 0;

      this.lexer.setInput(input);
      this.lexer.yy = this.yy;
      this.yy.lexer = this.lexer;
      if (typeof this.lexer.yylloc == 'undefined') this.lexer.yylloc =